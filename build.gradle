plugins {
    id 'com.adarshr.test-logger' version '3.0.0'
}

allprojects {
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.adarshr.test-logger'

    project.ext {
        slf4jVersion             = '1.7.30'
        junitjupiterVersion      = '5.7.0'
    }

    version = '1.0'
    sourceCompatibility = 11
    configurations.compile.transitive = true
    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        implementation 'org.apache.commons:commons-text:1.9'

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:slf4j-ext:$slf4jVersion"

        // Use JUnit Jupiter API for testing.
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitjupiterVersion"
        // Use JUnit Jupiter Engine for testing.
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitjupiterVersion"

        compile 'org.projectlombok:lombok:1.18.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.16'
        compile 'com.h2database:h2:1.4.200'
    }

    test {
        /*
        testLogging {
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED
        }
         */

        testlogger {
            theme 'standard'
            showExceptions true
            showStackTraces true
            showFullStackTraces false
            showCauses true
            slowThreshold 2000
            showSummary true
            showSimpleNames false
            showPassed true
            showSkipped true
            showFailed true
            showStandardStreams false
            showPassedStandardStreams true
            showSkippedStandardStreams true
            showFailedStandardStreams true
            logLevel 'lifecycle'
        }

        forkEvery = 1
        ignoreFailures = true
        useJUnitPlatform()
        filter {
            includeTestsMatching "*UnitTest"
        }
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    configurations {
        tests
        published.extendsFrom tests, archives
    }


    install {
        configuration = configurations.published
    }

    artifacts {
        tests testJar
    }

    sourceSets {
        main {}
    }
}
